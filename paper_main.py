#
#
import json
import jsbeautifier
import numpy as np
import matplotlib.pyplot as plt
import tikzplotlib

from MeshFreeMonteCarloShapeDerivative import MeshFreeProbabilisticShapeDerivative
from fem_functional_and_shape_derivatives import FEMShapeDerivative


def test_eval(derivative_type: str, epsilons, shape_functional_differences, derivative_val):
    residuals = []
    for s, d in zip(epsilons, shape_functional_differences):
        if derivative_type == 'probabilistic':
            taylor_res = d + s * derivative_val
        else:
            taylor_res = d - s * derivative_val
        residuals.append(abs(taylor_res))
    return residuals


def plot_results(pert_str, epsilon_list, monte_carlo_residuals, feynman_residuals, volume_residuals, boundary_residuals):

    plt_test = plt.figure()
    plt.grid(True)
    plt.xlabel("$\epsilon$")

    squares = lambda x: x ** 2
    values = [squares(i) for i in epsilon_list]
    plt.plot(epsilon_list, values, color="gray", lw=1.1, label="$\epsilon^2$", linestyle='-.')

    plt.plot(epsilon_list, feynman_residuals, label="feynman", color='blue', linewidth=1.75)
    plt.plot(epsilon_list, volume_residuals, label="volume", color='red', linewidth=1.75, linestyle='--', dashes=(10, 5, 10))
    plt.plot(epsilon_list, boundary_residuals, label="boundary", color='yellow', linewidth=1.75, linestyle='--', dashes=(5, 10, 5))
    plt.scatter(epsilons, monte_carlo_residuals, label='MC ', color='limegreen', s=35, marker="^", zorder=3)

    plt.title('Taylor Test ' + pert_str)
    plt.ylabel("$\epsilon^2$")
    plt.yscale('log')
    plt.xscale('log')

    from matplotlib.lines import Line2D
    from matplotlib.legend import Legend
    Line2D._us_dashSeq = property(lambda self: self._dash_pattern[1])
    Line2D._us_dashOffset = property(lambda self: self._dash_pattern[0])
    Legend._ncol = property(lambda self: self._ncols)

    plt.legend(loc=0), plt_test.autofmt_xdate()
    plt.legend()

    if pert_str == "('1.0', '0.0')":
        pert_str = 'constant'
    if pert_str == "('1.0', '1.0')":
        pert_str = 'constant'
    if pert_str == "('1.5*x[0]', '1.5*x[1]')":
        pert_str = 'normal_1'
    if pert_str == "('0.3-x[0]', '0.2-x[1]')":
        pert_str = 'contraction'
    if pert_str == "('sin(6*atan(x[0]/x[1]))*x[0]', 'sin(6*atan(x[0]/x[1]))*x[1]')":
        pert_str = 'star_shaped'

    plt.savefig('TaylorTestResults/fem_' + pert_str)
    tikzplotlib.save('TaylorTestResults/tikz_file_' + pert_str)
    plt.close(plt_test)

    pass


#
#
#
test_direction_list = [('sin(6*atan(x[0]/x[1]))*x[0]', 'sin(6*atan(x[0]/x[1]))*x[1]'), ('x[0]', 'x[1]'), ('x[0]-x[1]', 'x[1]-x[0]'), ('cos(x[0])', 'sin(x[1])'), ('x[0]*x[1]', 'x[1]'), ('1.0', '0.0'), ('x[0]*x[0]', 'x[0]*x[1]'), ('0.3-x[0]', '0.2-x[1]'), ]

mesh_free_test_class = MeshFreeProbabilisticShapeDerivative(test_direction_list)

simulate_new = True  # set to False if Monte Carlo values where computed before. This is for quick plot generation.
if simulate_new:
    mesh_free_test_class.monte_carlo_shape_derivative_test()
else:
    # these are the values used for the plots in the paper
    mesh_free_test_class.pinn_results_dict = {
    "name": "PINN",
    "('x[0]', 'x[1]')": [-0.9909921973604472, -0.989563040495865, -0.9873493938940402, -0.9904711608931596, -0.9902954083118428, -0.9907627650938561, -0.9916443027959464, -0.9917547617838294, -0.9895093507431593, -0.9885344703995782, -0.9883988073971595, -0.9902095699380153, -0.9884314701117114, -0.9906958560736623, -0.9865148651362317, -0.9895117214100748, -0.988874225440691, -0.9907468540540899, -0.9897070097242231, -0.9913156695439449, -0.9901090439216325, -0.9887405516150378, -0.9888408580094312, -0.9911564024472698, -0.9895780148673227, -0.9902631373194488, -0.9879743312277872, -0.990025804479439, -0.9922026360714236, -0.9874106928474853, -0.9887792827112709, -0.9910556833769449, -0.991894656248776, -0.9899906727377749, -0.9917884752581025, -0.9916517865679748, -0.9891186756540021, -0.9903652091819896, -0.9891454022410171, -0.9923020758587779, -0.9889943491337065, -0.9907427591004835, -0.9901454067671948, -0.989931941883625, -0.9922722331198252, -0.9887203273133935, -0.9889997363634146, -0.9895553995886642, -0.9906434622293806, -0.9882528053631293, -0.9924644209046086, -0.9912326649351502, -0.9905885939338811, -0.9908223988529499, -0.9914328355159638, -0.99021373497914, -0.9887644545544849, -0.9921544575309041, -0.9909385987411334, -0.9889190156871563, -0.987524103535018, -0.9903706399555812, -0.9902321841145125, -0.9907753132591506, -0.9883820192222084, -0.9900384230544303, -0.9896853402479107, -0.9894183709175919, -0.9887763348140226, -0.990020420443759, -0.9870285330948125, -0.9888627783151053, -0.9927016611854531, -0.9888147889699546, -0.9866951357354853, -0.9891279887360762, -0.9883211530078441, -0.9873578493447265, -0.9895256124804729, -0.9890425103218693, -0.9885261631150375, -0.9900865414996326, -0.9893815942521109, -0.988583727349794, -0.9916773617546579, -0.990435479564402, -0.992065581729516, -0.9908939509788387, -0.9888557028940598, -0.9891412459306923, -0.9872885954809095, -0.988163879556285, -0.9890339339065828, -0.9888470710946486, -0.9909164674234849, -0.9901514170145703, -0.9897930806625852, -0.9898453666877332, -0.9892054981010505, -0.9892087020725032],
    "('x[0]-x[1]', 'x[1]-x[0]')": [-0.5217525779441983, -0.5226727070964816, -0.5210256607893207, -0.5226957481761828, -0.5224696436040779, -0.5227442194862267, -0.523485734930912, -0.5228855635216976, -0.5210150842396831, -0.5221081228857422, -0.5210207127105375, -0.5226398392047412, -0.5227685285763233, -0.5224605498697115, -0.5205693937849284, -0.5222262524716563, -0.5212746270426544, -0.5216532092431112, -0.5226275671715567, -0.5232182747533282, -0.5215765888094237, -0.5208289688258962, -0.520727414435871, -0.5228177134522723, -0.521583119778221, -0.5223568493867832, -0.5219494053326591, -0.5217238191713135, -0.5225168118541821, -0.5210004799937581, -0.5206123615317289, -0.5233677677782933, -0.5229641766997204, -0.5226870898184514, -0.5221244173406125, -0.5234172299772448, -0.5203859708058721, -0.5211615310826714, -0.5213347546313676, -0.5239064620368632, -0.5210092923876422, -0.5217465848202218, -0.5227720153080678, -0.5212537113742197, -0.5222232811929087, -0.5210742571782018, -0.5216479909832032, -0.521614898569967, -0.5223903444411347, -0.5214760411613625, -0.5226015911623529, -0.5229771707699504, -0.521543107676112, -0.522513638170318, -0.5230717735866967, -0.5223872947277683, -0.5216809026764344, -0.5218153599623424, -0.5228161866874411, -0.5220144282807431, -0.5206127900299765, -0.5217829126795631, -0.5226701941217711, -0.5218267985837963, -0.5219713004921065, -0.5224728727378143, -0.5207520884453687, -0.5222993015142898, -0.5207653891606479, -0.5229718758532818, -0.52063073679487, -0.5212780625540966, -0.5230571930143628, -0.5212785636168382, -0.5212948991819398, -0.5218901098649978, -0.5217951611931586, -0.5204265769520731, -0.5209578805751157, -0.5211338252497553, -0.5211118612128399, -0.5222686138090018, -0.5225562887705193, -0.5218179768538743, -0.5220604985426006, -0.521270515624524, -0.5216998333809122, -0.5213056342115134, -0.5225243444626335, -0.5217106141351292, -0.5204865636714557, -0.5220723636815893, -0.5209371140265516, -0.5212767294824094, -0.5220230789373936, -0.5197147033459585, -0.522589400786567, -0.5214101045457432, -0.5218811479727435, -0.5215104659438347],
    "('cos(x[0])', 'sin(x[1])')": [-0.09923383244501487, -0.10021941792797881, -0.10026834721405607, -0.10059809021974188, -0.09979254948784168, -0.10054087962532053, -0.10070292535700887, -0.10074364744428507, -0.09893871836781035, -0.10001903854590197, -0.09985490279689552, -0.10061718886620824, -0.10094897910002837, -0.10030300269465386, -0.09971601764136984, -0.09994841727717191, -0.10058816008653282, -0.09986827103365319, -0.10031685235199064, -0.1006843581351114, -0.10125798298915213, -0.10022028573355565, -0.10021332448517457, -0.10143662465609941, -0.09970756782405085, -0.09936085095270211, -0.1012507500885502, -0.1006025660497106, -0.10122237535111697, -0.10001593230951918, -0.0991430268189568, -0.10099456827006643, -0.0999807920350221, -0.10091441974526452, -0.10026209188638209, -0.10027473789293055, -0.10018672980888127, -0.09996090652756937, -0.10040772216767596, -0.10043321194102726, -0.09968619027434747, -0.10030280051784352, -0.09996489953139236, -0.09997842309174625, -0.10063414238511395, -0.10105453199062507, -0.10005751613771993, -0.10119027463195007, -0.10095730667607657, -0.1003208969549665, -0.10122758787995986, -0.10135325642294507, -0.10036567167174594, -0.09983097711098078, -0.1005636572267202, -0.10022170208338649, -0.09952103758907499, -0.10038249419218218, -0.10093469868556189, -0.10031067362464159, -0.10116356260677174, -0.1012740951243207, -0.10088312665403174, -0.10032692497523645, -0.09942701924797995, -0.09999373882781425, -0.10118289500715143, -0.10130543883191961, -0.0996750353948608, -0.10042147818133411, -0.09954497476518018, -0.10039512585136044, -0.10082079570927908, -0.09959335223602828, -0.10010925360777657, -0.10131058290060768, -0.1008012582570831, -0.09970312381856777, -0.10101013000771263, -0.10097894656239563, -0.10013225612666779, -0.10011213484472205, -0.1007134528894349, -0.09971061879940334, -0.09972723988759813, -0.10026369701953058, -0.10053907708733366, -0.1006778034802133, -0.100208875630887, -0.10060805778779433, -0.1011860244808988, -0.0998151581732268, -0.10050753202436023, -0.10029944248736926, -0.10076536290637199, -0.10071496200761833, -0.10081327920567404, -0.10000688833232775, -0.101090088819019, -0.10066819881475417],
    "('x[0]*x[1]', 'x[1]')": [-0.3004850643561755, -0.29920424342449126, -0.2993690550527616, -0.3007398447696782, -0.3010462150766604, -0.3007075900674985, -0.30047708552681196, -0.30115987474420725, -0.2998313636891856, -0.30055375492700676, -0.29967994624074923, -0.3013661355313312, -0.2998169044763322, -0.3007583158380879, -0.2988988438138659, -0.2998171837474174, -0.3003324669895183, -0.3004804208653272, -0.2999579010962456, -0.3015208633139478, -0.301322696581866, -0.30024484026386244, -0.3007598011914726, -0.3010059807979461, -0.30078915845293025, -0.3006579837262311, -0.30087346495898065, -0.30100332524430157, -0.30097158665484136, -0.3004729935735348, -0.30063410185613904, -0.3014064444318373, -0.30137052527906216, -0.3007859994836644, -0.30074088642725044, -0.3014941056426357, -0.3003102775425089, -0.30068442898621695, -0.30044474998164006, -0.3015709677823355, -0.30003699440500137, -0.3001802628882839, -0.3003624907004988, -0.2996849104795415, -0.30173320647625973, -0.30037580009326975, -0.30003494346341364, -0.30065977154348045, -0.30099458729608014, -0.3001929840125643, -0.3017682262420243, -0.30126000084159454, -0.30078195665167956, -0.3000406460640498, -0.30159585875218187, -0.3014167752817511, -0.3000895085482298, -0.30173350142156524, -0.3008433055508888, -0.3001313665958476, -0.2999437456601358, -0.3013139347811231, -0.30073722828303645, -0.3006150417901913, -0.29994589699441876, -0.30122552173271405, -0.29984763526365343, -0.3004314094108468, -0.30043614848887307, -0.30116271565027153, -0.3000643823467389, -0.2999418547424959, -0.30103129679623947, -0.30023853639137765, -0.2997168312529743, -0.3012560633922214, -0.3001978747951717, -0.2995091394697434, -0.3012312754801905, -0.30034761405589167, -0.30057006343258846, -0.3006052733448079, -0.30075192133136136, -0.29969126558430864, -0.30063037882426813, -0.3010174191455457, -0.30070373139414397, -0.300190417612363, -0.30047687627463526, -0.30078516674416317, -0.30040502313445666, -0.30042692136565186, -0.30110121744098617, -0.30066202749343296, -0.3014672792211074, -0.30018440515065997, -0.3003146727735664, -0.30033526714744646, -0.3011536969836502, -0.3011163665889531],
    "('1.0', '0.0')": [0.47925193768666674, 0.4760784448128166, 0.4754532256656443, 0.4774559869980682, 0.4777540811926399, 0.476875140501513, 0.47743751294193143, 0.4781614641646294, 0.4776059329711189, 0.477078672182925, 0.4761541124521048, 0.476914576259859, 0.47544783097000853, 0.4769008131394985, 0.4758313098250373, 0.4757759623963163, 0.4771263934888879, 0.4771795141964727, 0.47653779880937, 0.478115678284949, 0.4769889376790895, 0.4763882456821167, 0.47688821981768126, 0.4770187212835806, 0.4787346606941102, 0.47885679556826755, 0.47525916036893573, 0.47690578307147047, 0.47655466110230055, 0.4762270113398167, 0.4782959257001808, 0.4766085098342501, 0.47876696767381605, 0.477377019053392, 0.4784210277561378, 0.4790500597801842, 0.4767021473034406, 0.47730127862929644, 0.4772708766378855, 0.4785033037681592, 0.4767943149700193, 0.4778566280849722, 0.47735594709464285, 0.4768037240527562, 0.4780213433539131, 0.4769425018270431, 0.47598781868475815, 0.4765857610126184, 0.4779273902259023, 0.4761752714085796, 0.4779149770476901, 0.47731207458997943, 0.4776646209485414, 0.47838998116992837, 0.47805385341549356, 0.47803482888914056, 0.4771676755009915, 0.4792612663833364, 0.4766333795841579, 0.4770031255465465, 0.4745812131957352, 0.4760215661080416, 0.4767009077741371, 0.476458703182748, 0.4778992983385397, 0.47855512098145003, 0.47551135380004694, 0.4753034288612472, 0.4762954522597849, 0.47726322235102037, 0.4769654745683741, 0.4769670781893458, 0.47776131501398644, 0.4771922978963952, 0.4759882544013028, 0.47648079596266923, 0.47563105682793094, 0.47596009360641506, 0.47603300802329174, 0.47548933131592985, 0.4761100222089272, 0.4775215614811614, 0.47695120388559814, 0.477330452448538, 0.4790396343270323, 0.4772369120361549, 0.4770130505004013, 0.4756779246804764, 0.47721721024256303, 0.476358581398195, 0.47500838596148787, 0.4770800785473105, 0.476417411443481, 0.47615619818103316, 0.4785504643769342, 0.47695499896075855, 0.4763915515844066, 0.4774255536467719, 0.4759785178037853, 0.4764748307531205],
    "('x[0]*x[0]', 'x[0]*x[1]')": [0.47895866969954937, 0.4761905530020771, 0.475920491822236, 0.4761631138469872, 0.47789283386792053, 0.47753392706768305, 0.476309773955504, 0.4784056823612214, 0.47906005149938374, 0.47671161091676595, 0.4762095998087037, 0.4774219001277302, 0.47514849461953523, 0.4766326986044327, 0.47532455800504475, 0.4763277946876878, 0.47639213899398053, 0.47788615544807245, 0.47645735536352046, 0.47806592515539625, 0.4776926779916485, 0.4763350592995673, 0.47738538851394857, 0.4772217384953819, 0.4777629215887614, 0.4782205696147669, 0.4751225576585842, 0.4767173224920632, 0.47698177533521646, 0.4767017150409081, 0.4784210454180393, 0.4771897056823865, 0.47833462210740174, 0.4773363591263267, 0.4777403671382302, 0.47903629949184406, 0.47715860636676793, 0.4773783116034702, 0.4763922241768668, 0.47913915976544547, 0.4768605599166873, 0.47709023384656674, 0.4780937241852209, 0.47751454956138567, 0.4778426808114262, 0.4770530296016942, 0.4766549323601455, 0.4763428524182348, 0.4770044593473344, 0.47573912619150305, 0.4784809458534792, 0.4771226118513785, 0.478234344587356, 0.47761028630591085, 0.4778763833874813, 0.4783116015046636, 0.47675149919298043, 0.478580083433658, 0.47719235987680564, 0.47723948090797, 0.474453362173995, 0.4750828675360548, 0.477188651000963, 0.4763677217720446, 0.47723551574986867, 0.47798113204742976, 0.47560748025928473, 0.4756600221216656, 0.47754726246200446, 0.47874998234862975, 0.4769887056780718, 0.4763061652993701, 0.47702441716194666, 0.47755062424072314, 0.47578623624077576, 0.4759659998237698, 0.4753468996337074, 0.4764369974722272, 0.47632108416634444, 0.47676635430365255, 0.47609983737756234, 0.4773250730757593, 0.4770891527932747, 0.4767361362812023, 0.4783390184662391, 0.4776905525177879, 0.4775717136391366, 0.4760821965242726, 0.47668677672336884, 0.4761164370843298, 0.47485525654592586, 0.47672381481118786, 0.4757513924302066, 0.4763518245029355, 0.4778947864097345, 0.47672397072073147, 0.47665552642794445, 0.4772239653792272, 0.4767930560163639, 0.4773612115386407],
    "('0.3-x[0]', '0.2-x[1]')": [1.2301066943574694, 1.2275015991757445, 1.225379520949516, 1.2298861879086145, 1.2278603692809416, 1.2279556478538263, 1.2302972563935644, 1.2318442933969453, 1.2282760933621377, 1.2270517033893489, 1.226502391382181, 1.2321192657636884, 1.2278196406835367, 1.228860756836374, 1.2250194384125725, 1.2273591012552159, 1.227032662092393, 1.2286993062651592, 1.2304261861376093, 1.229351500692726, 1.227959225834718, 1.2268334287173026, 1.228230992005898, 1.2303873382764319, 1.2278280878599985, 1.2289324565600295, 1.2272104169661964, 1.2274749334138337, 1.231583900655432, 1.2261950971124504, 1.2264732749174414, 1.2301457537081657, 1.232438961405163, 1.2287492890135605, 1.229257757418097, 1.2316506223990846, 1.2275729291242203, 1.2293818637826086, 1.228337450160172, 1.2312383876580835, 1.2262318610862288, 1.2290244061516284, 1.2286609884454536, 1.2265268437309054, 1.230487731645744, 1.229048970227088, 1.226800808746672, 1.2289750390617065, 1.2288475573235393, 1.2267880876460346, 1.2294056107710623, 1.2296833933041464, 1.2288547080366365, 1.2289935801652951, 1.2286819947826966, 1.2285549282341206, 1.2265120398577718, 1.2321035241188931, 1.2299418436762943, 1.2288970967064305, 1.226341161156159, 1.227941408820361, 1.2292741507746814, 1.2295876535435948, 1.2295162349459852, 1.2292554287827808, 1.2275910655954854, 1.226900895517957, 1.2267684990747465, 1.2297258517556282, 1.2271832753593568, 1.2277820428842936, 1.23124625396719, 1.227940538997718, 1.224850946070078, 1.2286554714074334, 1.2266806673512045, 1.2264646519376246, 1.2271677520486832, 1.2280169949879525, 1.2266206854138406, 1.2281588922995061, 1.2286470773971894, 1.2281426261855914, 1.2309271479114992, 1.228033110208245, 1.229968213408226, 1.2280901416515084, 1.2283542172135251, 1.2270972275200782, 1.2267190465105298, 1.227050248788885, 1.227056992195562, 1.2267740046613453, 1.2311914688716372, 1.2270392896334237, 1.2281925320705869, 1.2281558200754783, 1.2274811849133895, 1.2281813498545446],
    "('sin(6*atan(x[0]/x[1]))*x[0]', 'sin(6*atan(x[0]/x[1]))*x[1]')": [0.19626014848529583, 0.19544120915749424, 0.19618382398172496, 0.19622813855456353, 0.1976817509777967, 0.19579282538903622, 0.1954591994362104, 0.19749113590783476, 0.19692020848984892, 0.19553777120739932, 0.19578265158944744, 0.19547680324499142, 0.19616234876908564, 0.19709628417280423, 0.19616256551391387, 0.1966880018464402, 0.19696371662579337, 0.19587184386492754, 0.19587824019731526, 0.19740585066138708, 0.19727582277117983, 0.1971612462926319, 0.1957920530144255, 0.19610663138789589, 0.195638791517047, 0.1955211213679355, 0.19564884153885462, 0.19657884755935803, 0.1956062766731454, 0.1958237158366513, 0.19605751463829452, 0.19749323639246807, 0.19637186415566127, 0.19432702366869709, 0.19697314177705386, 0.19752861843788536, 0.19554216184425754, 0.19691437957522048, 0.19636950101226489, 0.19743541473494017, 0.1974355028776793, 0.19675282208001155, 0.19571048308530586, 0.1961397865543321, 0.19709111348616032, 0.1963439913074457, 0.19639824198391653, 0.1951133166401841, 0.19525103198456856, 0.1974016466834681, 0.19821905685843644, 0.1959451940854945, 0.19528868441254002, 0.196902122225113, 0.1946621940312598, 0.19674646939691595, 0.19630207948120038, 0.19744907088063177, 0.19619220323391254, 0.19652690516875707, 0.19725757787335713, 0.19529671288859174, 0.19574300532876426, 0.1971745422143274, 0.1955159501024687, 0.19449342495383207, 0.19625431031101173, 0.19503011326466554, 0.197497811866322, 0.19643369085001905, 0.19542843838064, 0.1963669923696988, 0.1963854778434924, 0.19599910096895612, 0.1964499812637643, 0.1959967195838209, 0.19772992848799537, 0.19557442388155916, 0.19588343263210906, 0.19668172363115602, 0.19568076667108553, 0.19646712414632272, 0.1959134486259566, 0.1955764115457109, 0.19601207475181115, 0.19619285163972458, 0.1947616947240853, 0.1954820971180471, 0.19551873326314223, 0.1966115888702463, 0.19437351286002924, 0.1975171672029185, 0.19845106837742166, 0.19582256548477509, 0.19755928585603436, 0.1975739188600386, 0.19697877705406766, 0.1980237019144516, 0.1964081676990933, 0.19648262027059152]
}

fem_test_class = FEMShapeDerivative(test_direction_list)
fem_test_class.eval_shape_derivative()

taylor_test_epsilons = epsilons = [0.1 / 2 ** i for i in range(12)]  # [0.1 / 1.2 ** i for i in range(42)]
fem_test_class.shape_functional_differences(taylor_test_epsilons)

for perturbation in test_direction_list:
    v_str = str(perturbation)

    probabilistic_shape_derivative_vals = np.array(mesh_free_test_class.pinn_results_dict[v_str])

    mean_estimate = probabilistic_shape_derivative_vals.sum() / mesh_free_test_class.monte_carlo_variance_estimator_number
    variance_estimate = (probabilistic_shape_derivative_vals ** 2).sum() / mesh_free_test_class.monte_carlo_variance_estimator_number - mean_estimate ** 2
    stdd = np.sqrt(variance_estimate)
    print(f"The standard deviation for the Monte Carlo simulation of the perturbation {v_str} is {stdd}")

    # pick a random Monte Carlo result to plot
    index = np.random.randint(probabilistic_shape_derivative_vals.shape[0])
    probabilistic_shape_derivative_test_val = probabilistic_shape_derivative_vals[index]
    monte = test_eval('probabilistic', taylor_test_epsilons, fem_test_class.shape_functional_differences_dict[v_str], probabilistic_shape_derivative_test_val)

    print(f"{v_str} monte carlo simulation mean = {mean_estimate} and the value used for the plot = {probabilistic_shape_derivative_test_val}")

    fey = test_eval('probabilistic', taylor_test_epsilons, fem_test_class.shape_functional_differences_dict[v_str], *fem_test_class.feynman_results_dict[v_str])
    vol = test_eval('classic', taylor_test_epsilons, fem_test_class.shape_functional_differences_dict[v_str], *fem_test_class.volume_results_dict[v_str])
    bdry = test_eval('classic', taylor_test_epsilons, fem_test_class.shape_functional_differences_dict[v_str], *fem_test_class.boundary_results_dict[v_str])

    plot_results(v_str, taylor_test_epsilons, monte, fey, vol, bdry)


def dict2str(data: dict, indent: int = 4, jsbeautify: bool = True):
    options = jsbeautifier.default_options()
    options.indent_size = indent
    dump = json.dumps(data, default=str)
    if jsbeautify:
        dump = jsbeautifier.beautify(dump, options)
    return dump


def save_dict(data: dict, name: str):
    data_str = dict2str(data)
    output_file = open('./TaylorTestResults/' + name + '.txt', 'w')
    output_file.write(data_str)
    output_file.close()
    pass


save_dict(mesh_free_test_class.pinn_results_dict, 'monte_carlo_pinn_values')
save_dict(fem_test_class.shape_functional_differences_dict, 'functional_differences')
save_dict(fem_test_class.feynman_results_dict, 'feynman_values')
save_dict(fem_test_class.volume_results_dict, 'volume_values')
save_dict(fem_test_class.boundary_results_dict, 'boundary values')
